@page "/pcDetails"
@page "/pcDetails/{id:guid}"
@inject NotificationService NotificationService
@attribute [AllowAnonymous]

@inject IPcService PcService
@inject IStorageService StorageService
@inject IUserService userService
@inject IMemoryRamService MemoryRamService
@inject ICpuService CpuService
@inject IMotherboardService MotherboardService
@inject IPowerSupplyService PowerSupplyService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject OtherServices OtherServices

@if (pc is not null)
{
    <button type="button" class="btn btn-primary" @onclick="updatePc">Actulizar</button>
    if(user.IdUser != 0)
    {
        <button type="button" class="btn btn-danger" @onclick="ShowConfirmationModal">Quitar</button>
    }
    else
    {
        <button type="button" class="btn btn-primary" @onclick="NavigateToAssignDevice">Asignar</button>
    }
    if (existsCredential)
    {
        <button type="button" class="btn btn-info" @onclick="NavigateToPcCredential">Ver Credenciales de Pc</button>
    }
    else
    {
        <button type="button" class="btn btn-info" @onclick="NavigateToPcCredential">Crear Credenciales</button>
    }

}

@if (pc is not null )
{

    @if (nullComponents.Count != 0)
    {
        <div class="row mb-3">
            <div class="col-md-4">
                <h5>Agrega un Componente</h5>
                <InputSelect class="form-select" @bind-Value="opcionSeleccionada" @oninput="EliminarOpcionSeleccionada">
                    <option value="@opcionSeleccionada">Selecciona una opción</option>
                    @foreach (var opcion in nullComponents.ToList())
                    {
                        <option value="@opcion">@opcion</option>
                    }
                </InputSelect>
            </div>
            @*<div class="col-md-4">
                @if (user.IdUser == 0)
                {
                    <h5>Asignar computadora a usuario</h5>
                    <RadzenDropDown class="form-select" AllowClear="true" @bind-Value=idUser AllowVirtualization="true" @oninput="AssignDevice"
                                    AllowFiltering="true" Data=@users TextProperty="Name" ValueProperty="IdUser" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                }
            </div>*@

            @*<div class="col-md-4">
                @if (idUser != 0)
                {
                    <br />
                    <button type="button" class="btn btn-secondary" @onclick="AssignDevice">Asingar</button>
                }
            </div>*@
            
        </div>

    }
    
    @*@if (idUser != 0 && dbPc is not null && dbPc.Count > 0)
    {
        <div class="alert alert-primary ">El Usuario: @user.Name <br> Ya Tiene @dbPc.Count Equipo(s) Asignado(s).</div>
        count = 1;
        @foreach (var pc in dbPc)
        {
            <a @onclick="() => NavigateToPcDetails(pc.IdPc)">Ver Equipo @count</a>
            <br />
            count++;
        }
        <div>
            <h3>
                ¿Quiere asignarle otro?
            </h3>
            <button class="btn btn-info" @onclick="ConfirmAssingDevice">
                Si
            </button>
            <button class="btn btn-info" @onclick="()=>idUser=0">
                No
            </button>
        </div>
    }*@

    @*Quitar estos if repetidos cando se le agreguen estilos*@
    @if (selectedOptions.Contains("Tarjeta Madre") || motherboard.IdMotherboard != Guid.Empty)
    {
        <a @onclick="@(async () => await NavigateToSection("Tarjeta Madre"))">Tarjeta Madre</a>
    }
    @if (selectedOptions.Contains("CPU") || cpu.IdCpu != Guid.Empty)
    {
        <a @onclick="@(async () => await NavigateToSection("CPU"))">|Procesador</a>
    }
    @if (selectedOptions.Contains("Memoria RAM") || memoryRam.Count != 0)
    {
        <a @onclick="@(async () => await NavigateToSection("Memoria RAM"))">|Memoria Ram</a>
    }
    @if (selectedOptions.Contains("Almacenamiento") || storage.Count != 0)
    {
        <a @onclick="@(async () => await NavigateToSection("Almacenamiento"))">|Alamacenamiento</a>
    }
    @if (selectedOptions.Contains("Fuente de Poder") || powerSupply.IdPsu != Guid.Empty)
    {
        <a @onclick="@(async () => await NavigateToSection("Fuente de Poder"))">|Fuente de Poder</a>
    }

    <BasicPcInformation pc="pc" user="user"></BasicPcInformation>
    @if (selectedOptions.Contains("Tarjeta Madre") || motherboard.IdMotherboard != Guid.Empty)
    {
        <div id="Tarjeta Madre">
            <MotherboardCard motherboard="motherboard" confirmationModalChild="@( () => ShowModalComponents("Tarjeta Madre") )"></MotherboardCard>
        </div>
        
    }
    @if (selectedOptions.Contains("CPU") || cpu.IdCpu != Guid.Empty)
    {
        <div id="CPU">
            <CpuCard cpu="cpu" confirmationModalChild="@( () => ShowModalComponents("CPU") )"></CpuCard>
        </div>
    }
    @if (selectedOptions.Contains("Memoria RAM") || memoryRam.Count != 0)
    {
        <div id="Memoria RAM">
            <MemoryRamCardList memoryRam="memoryRam" confirmationModalChild="@( () => ShowModalComponents("Memoria RAM"))" OnNumListChanged="ListenNumListRam"></MemoryRamCardList>
        </div>
        
    }
    @if (selectedOptions.Contains("Almacenamiento") || storage.Count != 0)
    {
        <div id="Almacenamiento">
            <StorageCardList storage="storage" confirmationModalChild="@( () => ShowModalComponents("Almacenamiento") )" OnNumListStoChanged="ListenNumListSto" numeroLista="numeroListaSto"></StorageCardList>
        </div>
        
    }
    
    @if (selectedOptions.Contains("Fuente de Poder") || powerSupply.IdPsu != Guid.Empty)
    {
        <div id="Fuente de Poder">
            <PowerSupplyCard powerSupply="powerSupply" confirmationModalChild="@( () => ShowModalComponents("Fuente de Poder") )"></PowerSupplyCard>
        </div>
        
    }

}
@if (user is not null)
{
    <!-- Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: @modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Quitar PC a usuario</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar" @onclick="CloseConfirmationModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que quieres quitarle esta PC a @user.Name ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseConfirmationModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeletion">Quitar</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Quitar Componente-->
<div class="modal" tabindex="-1" role="dialog" style="display: @modalComponentsDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Quitar @componentName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar" @onclick="CloseModalComponents">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que quieres quitar este componente a la PC?.<br />Se ira al Almacen de Hardware</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModalComponents">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmQuitModalComponents">Quitar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid id { get; set; }

    public Pc pc { get; set; }

    public int idUser { get; set; }

    IEnumerable<User> users;

    public User user { get; set; }

    public List<Storage> storage { get; set; }

    public List<MemoryRam> memoryRam { get; set; }

    public Cpu cpu { get; set; }
    //public Cpu bdCpu { get; set; }
    public Motherboard motherboard { get; set; }

    public PowerSupply powerSupply { get; set; }

    public Guid IdPcComponent;

    private List<string> nullComponents = new List<string>();
    private List<string> selectedOptions = new List<string>();

    public List<Pc>? dbPc = null;

    private string selectedOption = "default";

    public int numeroListaSto = 0;
    public int numeroListaRam = 0;

    string opcionSeleccionada = "default";

    public bool _storage, _memoryRam, _cpu, _motherboard, _powerSupply;

    public bool existsCredential;
    //public int count = 1;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        pc = await PcService.GetPcId(id);

        if (pc != null)
        {
            if (pc.IdUser!=null)
            {
                user = await userService.GetUserId(pc.IdUser.Value);
            }
            else
            {
                //Creo una nuevo usuario para que no se rompa la app al mandar el usurio 
                //en BasicInformation. Si lo hacia desde ahi no funcionaba.
                user = new User();
                //users = await userService.GetAllUsers();
            }

            storage = await StorageService.GetStorageWithPcId(pc.IdPc);
            memoryRam = await MemoryRamService.GetMemoryRamWithPcId(pc.IdPc);
            cpu = await CpuService.GetCpuWithPcId(pc.IdPc);
            motherboard = await MotherboardService.GetMotherboardWithPcId(pc.IdPc);
            powerSupply = await PowerSupplyService.GetPowerSupplyWithPcId(pc.IdPc);
            existsCredential = await PcCredentialService.ExistsCredential(pc.IdPc);


            // Verificar nulos y agregar a la lista
            if (storage.Count < 3)
            {
                nullComponents.Add("Almacenamiento");
                if (storage.Count() == 0) _storage = true;
                //_storage = true;
            }
            
            if (memoryRam.Count < 2)
            {
                nullComponents.Add("Memoria RAM");
                if (memoryRam.Count() == 0) _memoryRam = true;
                //_memoryRam = true;
            }
            
            if (cpu.IdCpu == Guid.Empty)
            {
                nullComponents.Add("CPU");
                _cpu = true;
            }

            if (motherboard.IdMotherboard == Guid.Empty)
            {
                nullComponents.Add("Tarjeta Madre");
                _motherboard = true;
            }

            if (powerSupply.IdPsu == Guid.Empty)
            {
                nullComponents.Add("Fuente de Poder");
                _powerSupply = true;
            }
        }

    }
    
    //public async Task ConfirmAssingDevice()
    //{
    //    pc.IdUser = idUser;
    //    pc = await PcService.UpdatePc(pc);
    //    Console.WriteLine("Se asigno Correctamente");
    //}
    //private void NavigateToPcDetails(Guid num)
    //{
    //    idUser = 0;
    //    NavigationManager.NavigateTo("/pcDetails/" + num);
    //}
    public void NavigateToAssignDevice()
    {
        NavigationManager.NavigateTo("/assignDevice/"+id);
    }
    private void NavigateToPcCredential()
    {
        NavigationManager.NavigateTo("/pcCredential/"+id);
    }
    private async Task NavigateToSection(string sectionId)
    {
        await JSRuntime.InvokeVoidAsync("scrollIntoView", sectionId);
    }
    @*En esta funcion tuve que usar a fuerzas un timer para lograr el desplazamiento al seleccion una opcion en el select
    se probo con async y await pero no funcionaba*@
    void EliminarOpcionSeleccionada(ChangeEventArgs args)
    {
        string valorSeleccionado = args.Value?.ToString();
        //string valorSeleccionado = opcionSeleccionada;

        if (!string.IsNullOrEmpty(valorSeleccionado))
        {
            //selectedOptions.Add(valorSeleccionado);
            HandleSelectionChange(valorSeleccionado);
            //nullComponents.Remove(valorSeleccionado);
            opcionSeleccionada = "default";

            // Configurar un temporizador para ejecutar la segunda función después de 2 segundos
            System.Timers.Timer timer = new System.Timers.Timer();
            timer.Interval = 200; // 2000 milisegundos = 2 segundos
            timer.AutoReset = false; // No se reiniciará automáticamente

            // Manejador para la segunda función
            timer.Elapsed += (sender, e) =>
            {
                // Llamar a la segunda función aquí
                NavigateToSection(valorSeleccionado);
            };

            // Iniciar el temporizador
            timer.Start();

        }
    }

    private void HandleSelectionChange(string valorSeleccionado)
    {
        switch (valorSeleccionado)
        {
            case "Almacenamiento":
                if (storage.Count == 0) storage.Add(new Storage());
                else if (storage.Count == 1) storage.Add(new Storage());
                else if (storage.Count == 2)
                {
                    storage.Add(new Storage());
                    //_storage = false;
                    nullComponents.Remove(valorSeleccionado);
                    //selectedOptions.Add(valorSeleccionado);
                    //_selectedOption = "default";
                }
                _storage = false;
                break;
            case "Memoria RAM":
                Console.WriteLine(memoryRam.Count());
                if (memoryRam.Count == 0) memoryRam.Add(new MemoryRam());
                else if (memoryRam.Count == 1)
                {
                    memoryRam.Add(new MemoryRam());
                    //_memoryRam = false;
                    nullComponents.Remove(valorSeleccionado);
                    //selectedOptions.Add(valorSeleccionado);
                    //_selectedOption = "default";
                }
                _memoryRam = false;
                break;
            case "CPU":
                _cpu = false;
                nullComponents.Remove(valorSeleccionado);
                selectedOptions.Add(valorSeleccionado);
                //_selectedOption = "default";

                break;
            case "Tarjeta Madre":
                _motherboard = false;
                nullComponents.Remove(valorSeleccionado);
                selectedOptions.Add(valorSeleccionado);
                //_selectedOption = "default";
                break;
            case "Fuente de Poder":
                _powerSupply = false;
                nullComponents.Remove(valorSeleccionado); ;
                selectedOptions.Add(valorSeleccionado);
                //_selectedOption = "default";
                break;
        }

    }
    public void ListenNumListSto(int newValue)
    {
        numeroListaSto = newValue;
    }


    private void ListenNumListRam(int newValue)
    {
        numeroListaRam = newValue;
    }

    private async Task updatePc()
    {
        //if(storage.Count() == 0) _storage = true;
        //if (memoryRam.Count() == 0) _memoryRam = true;
        //Los ifs sirven para que al momento de actualizar no cree componentes vacios. Estos solo ayudaran a cuando no este seleccionado, pero si el componente esta seleccionado y no se escribio nada aqui tendra que entrar las validaciones.
        //pc = await PcService.UpdatePc(pc);
        var IdPc = pc.IdPc;
        if(!_storage) storage = await StorageService.UpdateStorages(storage, IdPc);
        if(!_memoryRam) memoryRam = await MemoryRamService.UpdateMemoryRam(memoryRam, IdPc);
        motherboard = await MotherboardService.UpdateMotherboard(motherboard, IdPc);
        if(!_cpu) cpu = await CpuService.UpdateCpu(cpu, IdPc);
        if(!_powerSupply)powerSupply = await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPc);
        // var(updatedStorage,saveStorage) = await StorageService.UpdateStorages(storage, IdPc);
        // var(updatedMemoryRam,saveMemoryRam) = await MemoryRamService.UpdateMemoryRam(memoryRam, IdPc);
        // if (saveStorage == true)
        // {
        //     NotificationService.Notify(NotificationSeverity.Success, "Éxito", "Todo bien Almacenamiento");
        // }
        // else
        // {
        //     NotificationService.Notify(NotificationSeverity.Error, "Error", "Hubo problemas al guardar Alamacenamiento");
        // }
        // if (saveMemoryRam == true)
        // {
        //     NotificationService.Notify(NotificationSeverity.Success, "Éxito", "Todo bien Memoria Ram");
        // }
        // else
        // {
        //     NotificationService.Notify(NotificationSeverity.Error, "Error", "Hubo problemas al guardar Memoria Ram");
        // }
        //revisar para que sirven estos if
        //if (!_motherboard) motherboard = await MotherboardService.UpdateMotherboard(motherboard, IdPc);
        //if (!_cpu) cpu = await CpuService.UpdateCpu(cpu, IdPc);
        //if (!_powerSupply) powerSupply = await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPc);
        //if(_motherboard) motherboard = await MotherboardService.UpdateMotherboard(motherboard, IdPc);
        //if (_cpu) cpu = await CpuService.UpdateCpu(cpu, IdPc);
        //if (_powerSupply) powerSupply = await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPc);
        StateHasChanged();
    }

    private async Task QuitPC()
    {
        if (pc.IdUser != 0)
        {
            int idtemp = pc.IdUser.Value;
            pc.IdUser = null;
            pc = await PcService.UpdatePc(pc);
            OtherServices.ShowMessage("Se le quito el equipo al usuario: " + idtemp);
            NavigationManager.NavigateTo("/devices");
        }

    }
    private string modalDisplay = "none";
    private void ShowConfirmationModal()
    {
        modalDisplay = "block"; // Mostrar el modal
                                //StateHasChanged(); // Esto podría ser necesario
    }

    private void CloseConfirmationModal()
    {
        modalDisplay = "none"; // Ocultar el modal

    }

    private async void ConfirmDeletion()
    {
        await QuitPC();
        // ...
        CloseConfirmationModal(); // Cerrar el modal después de la confirmación
    }

    private string modalComponentsDisplay = "none";
    private string componentName { get; set; } = "";
    private void ShowModalComponents(string component)
    {
        switch (component)
        {
            case "Almacenamiento":
                componentName = component;
                break;
            case "Memoria RAM":
                componentName = component;
                break;
            case "CPU":
                componentName = component;
                break;
            case "Tarjeta Madre":
                componentName = component;
                break;
            case "Fuente de Poder":
                componentName = component;
                break;
        }
        modalComponentsDisplay = "block"; // Mostrar el modal
        StateHasChanged(); // Esto podría ser necesario
    }

    private void CloseModalComponents()
    {
        modalComponentsDisplay = "none"; // Ocultar el modal
        StateHasChanged();
    }
    /*Revisar que pasa con  selectedOptions y nullComponents Storage Y memoryRam*/
    private async Task ConfirmQuitModalComponents()
    {
        switch (componentName)
        {
            case "Almacenamiento":
                var IdPcSto = storage[numeroListaSto].IdPc.Value;
                storage[numeroListaSto].IdPc = null;
                storage = await StorageService.UpdateStorages(storage, IdPcSto);
                if (storage.Count == 0)
                {
                    selectedOptions.Remove("Almacenamiento");
                    nullComponents.Add("Almacenamiento");
                    _storage = true;
                }
                break;
            case "Memoria RAM":
                var IdPcRam = memoryRam[numeroListaRam].IdPc.Value;
                memoryRam[numeroListaRam].IdPc = null;
                memoryRam = await MemoryRamService.UpdateMemoryRam(memoryRam, IdPcRam);
                if (memoryRam.Count == 0)
                {
                    selectedOptions.Remove("Memoria RAM");
                    nullComponents.Add("Memoria RAM");
                    _memoryRam = true;
                }
                break;
            case "CPU":
                var IdPcCPU = cpu.IdPc.Value;
                cpu.IdPc = null;
                await CpuService.UpdateCpu(cpu, IdPcCPU);
                cpu = new Cpu();
                selectedOptions.Remove("CPU");
                nullComponents.Add("CPU");
                _cpu = true;
                break;
            case "Tarjeta Madre":
                var IdPcMother = motherboard.IdPc.Value;
                motherboard.IdPc = null;
                await MotherboardService.UpdateMotherboard(motherboard, IdPcMother);
                motherboard = new Motherboard();
                selectedOptions.Remove("Tarjeta Madre");
                nullComponents.Add("Tarjeta Madre");
                _motherboard = true;
                break;
            case "Fuente de Poder":
                var IdPcPSU = powerSupply.IdPc.Value;
                powerSupply.IdPc = null;
                await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPcPSU);
                powerSupply = new PowerSupply();
                selectedOptions.Remove("Fuente de Poder");
                nullComponents.Add("Fuente de Poder");
                _powerSupply = true;
                break;
                
        }
        CloseModalComponents(); // Cerrar el modal después de la confirmación
                                //StateHasChanged();
    }

}
