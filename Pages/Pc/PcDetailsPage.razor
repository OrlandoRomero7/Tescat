@page "/pcDetails"
@page "/pcDetails/{id:guid}"

@inject IPcService PcService
@inject IStorageService StorageService
@inject IUserService userService
@inject IMemoryRamService MemoryRamService
@inject ICpuService CpuService
@inject IMotherboardService MotherboardService
@inject IPowerSupplyService PowerSupplyService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject OtherServices OtherServices

@if (pc is not null)
{
    @*<button type="button" class="btn btn-danger" @onclick="ShowConfirmationModal">Quitar</button>*@
}

@if (pc != null && user != null)
{
    @if (options.Any(o => o.Value))
    {
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Agregar Cuenta</label>
                <InputSelect class="form-select" @bind-Value="selectedOption">
                    <option value="default">Seleccione una opción</option>
                    @foreach (var option in options)
                    {
                        if (option.Value)
                        {
                            <option>@option.Key</option>
                        }
                    }
                </InputSelect>
            </div>
        </div>
    }

    <BasicPcInformation pc="pc" user="user"></BasicPcInformation>
    @if (selectedOptions.Contains("Tarjeta Madre") || motherboard.IdMotherboard != Guid.Empty)
    {
        <MotherboardCard motherboard="motherboard" confirmationModalChild="@( () => ShowModalComponents("Tarjeta Madre") )"></MotherboardCard>
    }
    @if (selectedOptions.Contains("CPU") || cpu.IdCpu != Guid.Empty)
    {
        <CpuCard cpu="cpu" confirmationModalChild="@( () => ShowModalComponents("CPU") )"></CpuCard>
    }
    @if (selectedOptions.Contains("Memoria RAM") || memoryRam.Count != 0)
    {
        <MemoryRamCard memoryRam="memoryRam" confirmationModalChild="@( () => ShowModalComponents("Memoria RAM"))" OnNumListChanged="ListenNumListRam"></MemoryRamCard>
    }
    @if (selectedOptions.Contains("Almacenamiento") || storage.Count != 0 )
    {

        <StorageCardList storage="storage" confirmationModalChild="@( () => ShowModalComponents("Almacenamiento") )" OnNumListStoChanged="ListenNumListSto" numeroLista="numeroListaSto"></StorageCardList>
        //EjecutarFuncionEnStorageCard();
    }
    @if (selectedOptions.Contains("Fuente de Poder") || powerSupply.IdPsu != Guid.Empty)
    {
        <PowerSupplyCard powerSupply="powerSupply" confirmationModalChild="@( () => ShowModalComponents("Fuente de Poder") )"></PowerSupplyCard>
    }

}
@if(user is not null)
{
    <!-- Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: @modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Quitar PC a usuario</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar" @onclick="CloseConfirmationModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que quieres quitarle esta PC a @user.Name ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseConfirmationModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeletion">Quitar</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Quitar Componente-->
<div class="modal" tabindex="-1" role="dialog" style="display: @modalComponentsDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Quitar @componentName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar" @onclick="CloseModalComponents">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que quieres quitar este componente a la PC?.<br />Se ira al Almacen de Hardware</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModalComponents">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmQuitModalComponents">Quitar</button>
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public Guid id { get; set; }

    public Pc pc { get; set; }

    public User user { get; set; }

    public List<Storage> storage { get; set; }

    public List<MemoryRam> memoryRam { get; set; }

    public Cpu cpu { get; set; }
    //public Cpu bdCpu { get; set; }
    public Motherboard motherboard { get; set; }

    public PowerSupply powerSupply { get; set; }

    public Guid IdPcComponent;

    //List<string> nullComponents = new List<string>();
    private Dictionary<string, bool> options = new Dictionary<string, bool>();

    private List<string> selectedOptions = new List<string>();

    //private bool _storage, _memoryRam, _cpu, _motherboard, _powerSupply = true;

    //public StorageCard variableStorageCard = new StorageCard();

    public int numeroListaSto = 0;
    public int numeroListaRam = 0;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        pc = await PcService.GetPcId(id);

        if (pc != null)
        {
            if (pc.IdUser.HasValue)
            {
                user = await userService.GetUserId(pc.IdUser.Value);
                storage = await StorageService.GetStorageWithPcId(pc.IdPc);
                memoryRam = await MemoryRamService.GetMemoryRamWithPcId(pc.IdPc);
                cpu = await CpuService.GetCpuWithPcId(pc.IdPc);
                motherboard = await MotherboardService.GetMotherboardWithPcId(pc.IdPc);
                powerSupply = await PowerSupplyService.GetPowerSupplyWithPcId(pc.IdPc);

                //if (user == null) nullComponents.Add("User",true);
                if (storage.Count < 3)
                {
                    options.Add("Almacenamiento", true);
                    //_storage = true;
                }
                if (memoryRam.Count < 2)
                {
                    options.Add("Memoria RAM", true);
                    //_memoryRam = true;
                }
                if (cpu.IdCpu == Guid.Empty)
                {
                    options.Add("CPU", true);
                    //_cpu = true;
                }

                if (motherboard.IdMotherboard == Guid.Empty)
                {
                    options.Add("Tarjeta Madre", true);
                    //_motherboard = true;
                }

                if (powerSupply.IdPsu == Guid.Empty)
                {
                    options.Add("Fuente de Poder", true);
                    //_powerSupply = true;
                }
            }
        }

    }
    private string _selectedOption = "default";

    public string selectedOption
    {
        get => _selectedOption;
        set
        {
            _selectedOption = value;
            HandleSelectionChange();
        }
    }


    private void HandleSelectionChange()
    {
        if (_selectedOption == "default")
        {
            return;
        }
        options.Remove(_selectedOption);
        selectedOptions.Add(_selectedOption);
        _selectedOption = "default"; // Restablecer a la opción por defecto

  
        //switch (_selectedOption)
        //{
        //    case "Almacenamiento":
        //        if (storage.Count == 0) storage.Add(new Storage());
        //        else if (storage.Count == 1) storage.Add(new Storage());
        //        else if (storage.Count == 2)
        //        {
        //            storage.Add(new Storage());
        //            _storage = false;
        //            nullComponents.Remove(_selectedOption);
        //            selectedOptions.Add(_selectedOption);
        //            _selectedOption = "default";
        //        }
        //        break;
        //    case "Memoria RAM":
        //        Console.WriteLine(memoryRam.Count());
        //        if (memoryRam.Count == 0) memoryRam.Add(new MemoryRam());
        //        else if (memoryRam.Count == 1) 
        //        {
        //            memoryRam.Add(new MemoryRam());
        //            _memoryRam = false;
        //            nullComponents.Remove("Memoria RAM");
        //            selectedOptions.Add(_selectedOption);
        //            _selectedOption = "default";
        //        }
        //        break;
        //    case "CPU":
        //        _cpu = false;
        //        nullComponents.Remove(_selectedOption);
        //        selectedOptions.Add(_selectedOption);
        //        _selectedOption = "default";
        //        break;
        //    case "Tarjeta Madre":
        //        _motherboard = false;
        //        nullComponents.Remove(_selectedOption);
        //        selectedOptions.Add(_selectedOption);
        //        _selectedOption = "default";
        //        break;
        //    case "Fuente de Poder":
        //        _powerSupply = false;
        //        nullComponents.Remove(_selectedOption);
        //        selectedOptions.Add(_selectedOption);
        //        _selectedOption = "default";
        //        break;
        //}

    }
    private void ListenNumListSto(int newValue)
    {
        numeroListaSto = newValue;
    }


    private void ListenNumListRam(int newValue)
    {
        numeroListaRam = newValue;
    }

    //private async Task updatePc()
    //{
    //    pc = await PcService.UpdatePc(pc);
    //    var IdPc = pc.IdPc;
    //    storage = await StorageService.UpdateStorages(storage, IdPc);
    //    memoryRam = await MemoryRamService.UpdateMemoryRam(memoryRam, IdPc);
    //    //revisar para que sirven estos if
    //    if (!_motherboard) motherboard = await MotherboardService.UpdateMotherboard(motherboard, IdPc);
    //    if (!_cpu) cpu = await CpuService.UpdateCpu(cpu, IdPc);
    //    if (!_powerSupply) powerSupply = await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPc);
    //}

    private async Task QuitPC()
    {
        if (pc.IdUser != 0)
        {
            int idtemp = pc.IdUser.Value;
            pc.IdUser = null;
            pc = await PcService.UpdatePc(pc);
            OtherServices.ShowMessage("Se le quito el equipo al usuario: " + idtemp);
            NavigationManager.NavigateTo("/devices");
        }

    }
    private string modalDisplay = "none";
    private void ShowConfirmationModal()
    {
        modalDisplay = "block"; // Mostrar el modal
        StateHasChanged(); // Esto podría ser necesario
    }

    private void CloseConfirmationModal()
    {
        modalDisplay = "none"; // Ocultar el modal
    }

    private async void ConfirmDeletion()
    {
        await QuitPC();
        // ...
        CloseConfirmationModal(); // Cerrar el modal después de la confirmación
    }



    private string modalComponentsDisplay = "none";
    private string componentName { get; set; } = "";
    private void ShowModalComponents(string component)
    {
        switch (component)
        {
            case "Almacenamiento":
                componentName = component;
                break;
            case "Memoria RAM":
                componentName = component;
                break;
            case "CPU":
                componentName = component;
                break;
            case "Tarjeta Madre":
                componentName = component;
                break;
            case "Fuente de Poder":
                componentName = component;
                break;

                // ... otros casos
        }
        modalComponentsDisplay = "block"; // Mostrar el modal
        StateHasChanged(); // Esto podría ser necesario
    }

    private void CloseModalComponents()
    {
        modalComponentsDisplay = "none"; // Ocultar el modal
    }
    /*Revisar que pasa con  selectedOptions y nullComponents Storage Y memoryRam*/
    private async Task ConfirmQuitModalComponents()
    {
        switch (componentName)
        {
            case "Almacenamiento":
                var IdPcSto = storage[numeroListaSto].IdPc.Value;
                //Storage newStorage = storage.FirstOrDefault(s => s.IdPc == IdPcSto);
                //newStorage.IdPc = null;
                storage[numeroListaSto].IdPc = null;
                await StorageService.UpdateStorages(storage, IdPcSto);
                storage = await StorageService.GetStorageWithPcId(pc.IdPc);
                if (storage.Count == 0)
                {
                    selectedOptions.Remove("Almacenamiento");
                    options.Add("Almacenamiento", true);
                }
                //_storage = true;
                break;
            case "Memoria RAM":
                var IdPcRam = memoryRam[numeroListaRam].IdPc.Value;
                memoryRam[numeroListaRam].IdPc = null;
                await MemoryRamService.UpdateMemoryRam(memoryRam, IdPcRam);
                memoryRam = await MemoryRamService.GetMemoryRamWithPcId(pc.IdPc);
                if(storage.Count == 0)
                {
                    selectedOptions.Remove("Memoria RAM");
                    options.Add("Memoria RAM", true);
                }
                //_memoryRam = true;
                break;
            case "CPU":
                var IdPcCPU = cpu.IdPc.Value;
                cpu.IdPc = null;
                await CpuService.UpdateCpu(cpu, IdPcCPU);
                cpu = new Cpu();
                selectedOptions.Remove("CPU");
                options.Add("CPU", true);
                //_cpu = true;
                break;
            case "Tarjeta Madre":
                var IdPcMother = motherboard.IdPc.Value;
                motherboard.IdPc = null;
                await MotherboardService.UpdateMotherboard(motherboard, IdPcMother);
                motherboard = new Motherboard();
                selectedOptions.Remove("Tarjeta Madre");
                options.Add("Tarjeta Madre", true);
                //_motherboard = true;
                break;
            case "Fuente de Poder":
                var IdPcPSU = powerSupply.IdPc.Value;
                powerSupply.IdPc = null;
                await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPcPSU);
                powerSupply = new PowerSupply();
                selectedOptions.Remove("Fuente de Poder");
                options.Add("Fuente de Poder", true);
                //_powerSupply = true;
                break;
        }
        
        CloseModalComponents(); // Cerrar el modal después de la confirmación
        //StateHasChanged();
    }

    @*
    private async void OptionSelected(string a)
    {
        if (a == "Fuente de Poder")
        {
            await JSRuntime.InvokeVoidAsync("scrollToCard", "fuente-de-poder");
            // Llamada a la función de desplazamiento o cualquier otra lógica que desees ejecutar.
        }
         _selectedOption = "default"; // Restablecer a la opción por defecto

    }
    *@
}
