@page "/pcDetails"
@page "/pcDetails/{id:guid}"

@inject IPcService PcService
@inject IStorageService StorageService
@inject IUserService userService
@inject IMemoryRamService MemoryRamService
@inject ICpuService CpuService
@inject IMotherboardService MotherboardService
@inject IPowerSupplyService PowerSupplyService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject OtherServices OtherServices

@if (pc is not null)
{
    <button type="button" class="btn btn-primary" @onclick="updatePc">Actulizar</button>
    <button type="button" class="btn btn-danger" @onclick="ShowConfirmationModal">Quitar</button>
}


@*@if (options.Any(o => o.Value))
{
    <div class="row mb-3">
        <div class="col-md-4">
            <label class="form-label">Agregar Cuenta</label>
            <InputSelect class="form-select" @bind-Value="selectedOption">
                <option value="default">Seleccione una opción</option>
                @foreach (var option in options)
                {
                    if (option.Value)
                    {
                        <option>@option.Key</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
}*@
@*@if (opciones.Count != 0)
{
    <InputSelect @bind-Value="opcionSeleccionada" @onchange="HandleChange">
        <option value="default">Selecciona una opción</option>
        @foreach (var opcion in opciones.ToList())
        {
            <option value="@opcion">@opcion</option>
        }
    </InputSelect>
}*@


@if (pc != null && user != null)
{
    @if (nullComponents.Count != 0)
    {
        <div class="row mb-3">
            <div class="col-md-4">
                <h5>Agrega un Componente</h5>
                <InputSelect class="form-select" @bind-Value="opcionSeleccionada" @oninput="EliminarOpcionSeleccionada">
                    <option value="@opcionSeleccionada">Selecciona una opción</option>
                    @foreach (var opcion in nullComponents.ToList())
                    {
                        <option value="@opcion">@opcion</option>
                    }
                </InputSelect>
            </div>
        </div>

    }
    

    <BasicPcInformation pc="pc" user="user"></BasicPcInformation>
    @if (selectedOptions.Contains("Tarjeta Madre") || motherboard.IdMotherboard != Guid.Empty)
    {
        <MotherboardCard motherboard="motherboard" confirmationModalChild="@( () => ShowModalComponents("Tarjeta Madre") )"></MotherboardCard>
    }
    @if (selectedOptions.Contains("CPU") || cpu.IdCpu != Guid.Empty)
    {
        <CpuCard cpu="cpu" confirmationModalChild="@( () => ShowModalComponents("CPU") )"></CpuCard>
    }
    @if (selectedOptions.Contains("Memoria RAM") || memoryRam.Count != 0)
    {
        <MemoryRamCardList memoryRam="memoryRam" confirmationModalChild="@( () => ShowModalComponents("Memoria RAM"))" OnNumListChanged="ListenNumListRam"></MemoryRamCardList>
    }
    @if (selectedOptions.Contains("Almacenamiento") || storage.Count != 0)
    {
        <StorageCardList storage="storage" confirmationModalChild="@( () => ShowModalComponents("Almacenamiento") )" OnNumListStoChanged="ListenNumListSto" numeroLista="numeroListaSto"></StorageCardList>
    }
    
    @if (selectedOptions.Contains("Fuente de Poder") || powerSupply.IdPsu != Guid.Empty)
    {
        <PowerSupplyCard powerSupply="powerSupply" confirmationModalChild="@( () => ShowModalComponents("Fuente de Poder") )"></PowerSupplyCard>
    }

}
@if (user is not null)
{
    <!-- Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display: @modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Quitar PC a usuario</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar" @onclick="CloseConfirmationModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que quieres quitarle esta PC a @user.Name ?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseConfirmationModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeletion">Quitar</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Quitar Componente-->
<div class="modal" tabindex="-1" role="dialog" style="display: @modalComponentsDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Quitar @componentName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar" @onclick="CloseModalComponents">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que quieres quitar este componente a la PC?.<br />Se ira al Almacen de Hardware</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModalComponents">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmQuitModalComponents">Quitar</button>
            </div>
        </div>
    </div>
</div>




@code {
    [Parameter]
    public Guid id { get; set; }

    public Pc pc { get; set; }

    public User user { get; set; }

    public List<Storage> storage { get; set; }

    public List<MemoryRam> memoryRam { get; set; }

    public Cpu cpu { get; set; }
    //public Cpu bdCpu { get; set; }
    public Motherboard motherboard { get; set; }

    public PowerSupply powerSupply { get; set; }

    public Guid IdPcComponent;
    //////////
    private List<string> nullComponents = new List<string>();
    private List<string> selectedOptions = new List<string>();

    private string selectedOption = "default";

    ////

    //void HandleChange(ChangeEventArgs e)
    //{
    //    // Realiza acciones cuando el valor cambia
    //    Console.WriteLine($"Nuevo valor: {miVariable}");
    //}

    public int numeroListaSto = 0;
    public int numeroListaRam = 0;

    string opcionSeleccionada = "default";

    //public string opcionSeleccionada
    //{
    //    get => _opcionSeleccionada;
    //    set
    //    {
    //        _opcionSeleccionada = value;
    //    }
    //}

    //List<string> opciones = new List<string>();

    public bool _storage, _memoryRam, _cpu, _motherboard, _powerSupply;


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        pc = await PcService.GetPcId(id);

        if (pc != null)
        {
            if (pc.IdUser.HasValue)
            {
                user = await userService.GetUserId(pc.IdUser.Value);
                storage = await StorageService.GetStorageWithPcId(pc.IdPc);
                memoryRam = await MemoryRamService.GetMemoryRamWithPcId(pc.IdPc);
                cpu = await CpuService.GetCpuWithPcId(pc.IdPc);
                motherboard = await MotherboardService.GetMotherboardWithPcId(pc.IdPc);
                powerSupply = await PowerSupplyService.GetPowerSupplyWithPcId(pc.IdPc);

                // Verificar nulos y agregar a la lista
                if (storage.Count < 3) 
                {
                    nullComponents.Add("Almacenamiento");
                    //_storage = true;
                }

                if (memoryRam.Count < 2)
                {
                    nullComponents.Add("Memoria RAM");
                    //_memoryRam = true;
                } 

                if (cpu.IdCpu == Guid.Empty)
                {
                    nullComponents.Add("CPU");
                    //_cpu = true;
                }

                if (motherboard.IdMotherboard == Guid.Empty)
                {
                    nullComponents.Add("Tarjeta Madre");
                    //_motherboard = true;
                }

                if (powerSupply.IdPsu == Guid.Empty)
                {
                    nullComponents.Add("Fuente de Poder");
                    //_powerSupply = true;
                }


                //if (user == null) nullComponents.Add("User",true);
                //if (storage.Count < 3)
                //{
                //    options.Add("Almacenamiento", true);
                //    //_storage = true;
                //}
                //else
                //{
                //    options.Add("Almacenamiento", false);
                //}
                //if (memoryRam.Count < 2)
                //{
                //    options.Add("Memoria RAM", true);
                //    //_memoryRam = true;
                //}
                //else
                //{
                //    options.Add("Memoria RAM", false);
                //}
                //if (cpu.IdCpu == Guid.Empty)
                //{
                //    options.Add("CPU", true);
                //    //_cpu = true;
                //}
                //else
                //{
                //    options.Add("CPU", false);
                //}
                //if (motherboard.IdMotherboard == Guid.Empty)
                //{
                //    options.Add("Tarjeta Madre", true);
                //    //_motherboard = true;
                //}
                //else
                //{
                //    options.Add("Tarjeta Madre", false);
                //}
                //if (powerSupply.IdPsu == Guid.Empty)
                //{
                //    options.Add("Fuente de Poder", true);
                //    //_powerSupply = true;
                //}
                //else
                //{
                //    options.Add("Fuente de Poder", false);
                //}
            }
        }

    }
    void EliminarOpcionSeleccionada(ChangeEventArgs args)
    {
        string valorSeleccionado = args.Value?.ToString();

        if (!string.IsNullOrEmpty(valorSeleccionado))
        {
            //selectedOptions.Add(valorSeleccionado);
            HandleSelectionChange(valorSeleccionado);
            //nullComponents.Remove(valorSeleccionado);
            opcionSeleccionada = "default";

            //StateHasChanged();
        }
    }
    //private void HandleSelectionChange(ChangeEventArgs e)
    //{
    //    var newlySelectedOption = e.Value.ToString();

    //    if (newlySelectedOption != "default")
    //    {
    //        // Realizar operaciones con la opción seleccionada
    //        selectedOptions.Add(newlySelectedOption);
    //    }

    //    // Restablecer a la opción por defecto
    //    selectedOption = "default";
    //}
    //private string _selectedOption = "default";

    //public string selectedOption
    //{
    //    get => _selectedOption;
    //    set
    //    {
    //        _selectedOption = value;
    //        HandleSelectionChange();
    //    }
    //}



    private void HandleSelectionChange(string valorSeleccionado)
    {
        //if (_selectedOption == "default")
        //{
        //    return;
        //}
        //options.Remove(_selectedOption);
        //selectedOptions.Add(_selectedOption);
        //_selectedOption = "default"; // Restablecer a la opción por defecto


        switch (valorSeleccionado)
        {
            case "Almacenamiento":
                if (storage.Count == 0) storage.Add(new Storage());
                else if (storage.Count == 1) storage.Add(new Storage());
                else if (storage.Count == 2)
                {
                    storage.Add(new Storage());
                    //_storage = false;
                    nullComponents.Remove(valorSeleccionado);
                    //selectedOptions.Add(valorSeleccionado);
                    //_selectedOption = "default";
                }
                break;
            case "Memoria RAM":
                Console.WriteLine(memoryRam.Count());
                if (memoryRam.Count == 0) memoryRam.Add(new MemoryRam());
                else if (memoryRam.Count == 1)
                {
                    memoryRam.Add(new MemoryRam());
                    //_memoryRam = false;
                    nullComponents.Remove(valorSeleccionado);
                    //selectedOptions.Add(valorSeleccionado);
                    //_selectedOption = "default";
                }
                break;
            case "CPU":
                _cpu = true;
                nullComponents.Remove(valorSeleccionado);
                selectedOptions.Add(valorSeleccionado);
                //_selectedOption = "default";
                break;
            case "Tarjeta Madre":
                _motherboard = true;
                nullComponents.Remove(valorSeleccionado);
                selectedOptions.Add(valorSeleccionado);
                //_selectedOption = "default";
                break;
            case "Fuente de Poder":
                _powerSupply = true;
                nullComponents.Remove(valorSeleccionado); ;
                selectedOptions.Add(valorSeleccionado);
                //_selectedOption = "default";
                break;
        }

    }
    public void ListenNumListSto(int newValue)
    {
        numeroListaSto = newValue;
    }


    private void ListenNumListRam(int newValue)
    {
        numeroListaRam = newValue;
    }

    private async Task updatePc()
    {
        //Los ifs sirven para que al momento de actualizar no cree componentes vacios. Estos solo ayudaran a cuando no este seleccionado, pero si el componente esta seleccionado y no se escribio nada aqui tendra que entrar las validaciones.
        //pc = await PcService.UpdatePc(pc);
        var IdPc = pc.IdPc;
        storage = await StorageService.UpdateStorages(storage, IdPc);
        memoryRam = await MemoryRamService.UpdateMemoryRam(memoryRam, IdPc);
        //revisar para que sirven estos if
        //if (!_motherboard) motherboard = await MotherboardService.UpdateMotherboard(motherboard, IdPc);
        //if (!_cpu) cpu = await CpuService.UpdateCpu(cpu, IdPc);
        //if (!_powerSupply) powerSupply = await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPc);
        if(_motherboard) motherboard = await MotherboardService.UpdateMotherboard(motherboard, IdPc);
        if (_cpu) cpu = await CpuService.UpdateCpu(cpu, IdPc);
        if (_powerSupply) powerSupply = await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPc);
        StateHasChanged();
    }

    private async Task QuitPC()
    {
        if (pc.IdUser != 0)
        {
            int idtemp = pc.IdUser.Value;
            pc.IdUser = null;
            pc = await PcService.UpdatePc(pc);
            OtherServices.ShowMessage("Se le quito el equipo al usuario: " + idtemp);
            NavigationManager.NavigateTo("/devices");
        }

    }
    private string modalDisplay = "none";
    private void ShowConfirmationModal()
    {
        modalDisplay = "block"; // Mostrar el modal
                                //StateHasChanged(); // Esto podría ser necesario
    }

    private void CloseConfirmationModal()
    {
        modalDisplay = "none"; // Ocultar el modal

    }

    private async void ConfirmDeletion()
    {
        await QuitPC();
        // ...
        CloseConfirmationModal(); // Cerrar el modal después de la confirmación
    }



    private string modalComponentsDisplay = "none";
    private string componentName { get; set; } = "";
    private void ShowModalComponents(string component)
    {
        switch (component)
        {
            case "Almacenamiento":
                componentName = component;
                break;
            case "Memoria RAM":
                componentName = component;
                break;
            case "CPU":
                componentName = component;
                break;
            case "Tarjeta Madre":
                componentName = component;
                break;
            case "Fuente de Poder":
                componentName = component;
                break;
        }
        modalComponentsDisplay = "block"; // Mostrar el modal
        StateHasChanged(); // Esto podría ser necesario
    }

    private void CloseModalComponents()
    {
        modalComponentsDisplay = "none"; // Ocultar el modal
        StateHasChanged();
    }
    /*Revisar que pasa con  selectedOptions y nullComponents Storage Y memoryRam*/
    private async Task ConfirmQuitModalComponents()
    {
        switch (componentName)
        {
            case "Almacenamiento":
                var IdPcSto = storage[numeroListaSto].IdPc.Value;
                storage[numeroListaSto].IdPc = null;
                storage = await StorageService.UpdateStorages(storage, IdPcSto);
                if (storage.Count == 0)
                {
                    selectedOptions.Remove("Almacenamiento");
                    nullComponents.Add("Almacenamiento");
                }
                break;
            case "Memoria RAM":
                var IdPcRam = memoryRam[numeroListaRam].IdPc.Value;
                memoryRam[numeroListaRam].IdPc = null;
                memoryRam = await MemoryRamService.UpdateMemoryRam(memoryRam, IdPcRam);
                if (memoryRam.Count == 0)
                {
                    selectedOptions.Remove("Memoria RAM");
                    nullComponents.Add("Memoria RAM");
                }
                break;
            case "CPU":
                var IdPcCPU = cpu.IdPc.Value;
                cpu.IdPc = null;
                await CpuService.UpdateCpu(cpu, IdPcCPU);
                cpu = new Cpu();
                selectedOptions.Remove("CPU");
                nullComponents.Add("CPU");
                //_cpu = true;
                break;
            case "Tarjeta Madre":
                var IdPcMother = motherboard.IdPc.Value;
                motherboard.IdPc = null;
                await MotherboardService.UpdateMotherboard(motherboard, IdPcMother);
                motherboard = new Motherboard();
                selectedOptions.Remove("Tarjeta Madre");
                nullComponents.Add("Tarjeta Madre");
                //_motherboard = true;
                break;
            case "Fuente de Poder":
                var IdPcPSU = powerSupply.IdPc.Value;
                powerSupply.IdPc = null;
                await PowerSupplyService.UpdatePowerSupply(powerSupply, IdPcPSU);
                powerSupply = new PowerSupply();
                selectedOptions.Remove("Fuente de Poder");
                nullComponents.Add("Fuente de Poder");
                //_powerSupply = true;
                break;
        }

        CloseModalComponents(); // Cerrar el modal después de la confirmación
                                //StateHasChanged();
    }

    @*
    private async void OptionSelected(string a)
    {
        if (a == "Fuente de Poder")
        {
            await JSRuntime.InvokeVoidAsync("scrollToCard", "fuente-de-poder");
            // Llamada a la función de desplazamiento o cualquier otra lógica que desees ejecutar.
        }
         _selectedOption = "default"; // Restablecer a la opción por defecto

    }
    *@
}
