@page "/addDevice/{idUser:int}"

@inject IUserService UserService
@inject IPcService PcService
@inject NavigationManager NavigationManager


@if (dbPc is not null)
{
    @if (user is not null && dbPc.Count > 0 && !addOther)
    {
        <div class="alert alert-primary ">El Usuario: @user.Name <br> Ya Tiene @dbPc.Count Equipo(s) Asignado(s).</div>
        @foreach (var pc in dbPc)
        {
            <a @onclick="() => NavigateToPcDetails(pc.IdPc)">Ver Equipo @count</a>
            <br />
            count++;
        }

        <div>
            <h3>
                ¿Quiere agregarle otro?
            </h3>
            <button class="btn btn-info" @onclick="addOtherDevice">
                Si
            </button>
            <button class="btn btn-info">
                No, Regresar
            </button>
        </div>
    }
    else if ((user is not null && addOther) || (dbPc.Count == 0 && !addOther))
    {
        <button type="button" class="btn btn-primary" @onclick="createNewDevice">Crear</button>
        <BasicPcInformation pc="pc" user="user"></BasicPcInformation>
    }
}

@code {
    [Parameter]
    public int idUser { get; set; } = default!;

    public Pc pc = new Pc();

    public User? user { get; set; }

    public List<Pc>? dbPc = null;

    public int count = 1;

    private bool addOther = false;

    protected override async Task OnInitializedAsync()
    {

        user = await UserService.GetUserId(idUser);

        dbPc = await PcService.GetNumberPc(idUser);

    }

    private void NavigateToPcDetails(Guid num)
    {
        NavigationManager.NavigateTo("/pcDetails/" + num);
    }

    private void addOtherDevice()
    {
        addOther = true;

    }
    private async void createNewDevice()
    {
        if(user is not null)
        {
            pc.IdUser = user.IdUser;
            pc = await PcService.InsertPc(pc);
            NavigationManager.NavigateTo("/pcDetails/" + pc.IdPc);
        }
    }
        

}
