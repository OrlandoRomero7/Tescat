@page "/pcCredential"
@page "/pcCredential/{id:guid}"
@inject NotificationService NotificationService



@if (pcCredential != null)
{
    if (pcCredential.IdPc != Guid.Empty)
    {
        <button type="button" class="btn btn-primary" @onclick="UpdatePcCredential">Actulizar</button>

    }
    else if (pcCredential.IdPc == Guid.Empty)
    {
        <button type="button" class="btn btn-primary" @onclick="CreatePcCredential">Crear</button>
    }


    <FormSection Title="Credenciales de la computadora">
        <EditForm Model="@pcCredential">
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Nombre de Usuario de Pc</label>
                    <InputText class="form-control" @bind-Value="pcCredential.PcUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="pcCredential.PcPassword"></InputText>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">ID AnyDesk</label>
                    <InputText class="form-control" @bind-Value="pcCredential.IdAnydesk"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="pcCredential.AnydeskPass"></InputText>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Nombre de Usuario del Comun</label>
                    <InputText class="form-control" @bind-Value="pcCredential.ComunUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="pcCredential.ComunPass"></InputText>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Nombre de Usuario del Mozart</label>
                    <InputText class="form-control" @bind-Value="pcCredential.MozartRdpUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="pcCredential.MozartRdpPass"></InputText>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Nombre de Usuario del Darwin</label>
                    <InputText class="form-control" @bind-Value="pcCredential.DarwinVantecUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="pcCredential.DarwinVantecPass"></InputText>
                </div>
            </div>
        </EditForm>
    </FormSection>
}


@code {
    [Parameter]
    public Guid id { get; set; }

    public PcCredential pcCredential { get; set; }
    private string notificationMessage;

    protected override async Task OnInitializedAsync()
    {
        if (id != Guid.Empty)
        {
            pcCredential = await PcCredentialService.GetPcCredentialId(id);

        }
        //base.OnInitializedAsync();


    }
    public async Task UpdatePcCredential()
    {
        pcCredential = await PcCredentialService.UpdatePcCredential(pcCredential);
        // var (updatedCredential,message) = await PcCredentialService.UpdatePcCredential(pcCredential);
        // if (updatedCredential != null)
        // {
        //     pcCredential = updatedCredential;
        //     notificationMessage = message;
        //     NotificationService.Notify(NotificationSeverity.Success, "Éxito", message);

        // }
        // else
        // {

        // }
    }
    public async Task CreatePcCredential()
    {
        //Console.WriteLine("holaaa");
        pcCredential.IdPc = id;
        //Console.WriteLine(pcCredential.IdPc);
        pcCredential = await PcCredentialService.InsertPcCredential(pcCredential);
    }


}
