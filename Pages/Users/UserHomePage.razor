@page "/users"
@page "/users/{SearchTerm}"
@page "/users/{SearchTerm}/office/{UserOffice}/entrydate/{UserLength:int}"


@inject IUserService UserService
@inject OtherServices OtherServices
@inject TescatDbContext Context
@inject NavigationManager NavigationManager


<PageTitle>Usuarios - Tescat Software</PageTitle>

<UserHomePageLayout>

    <div class="cards container">


        @*@if (Users != null && SearchTerm != null || (UserOffice != null))*@
        @if (Users != null && SearchTerm != null)
        {
            <div class="container" st yle="max-width:100%">
                <NavLink href="users" Match="NavLinkMatch.All">
                    <i class="bi bi-arrow-left" style="font-size:2rem; margin-top:-1rem"></i>
                </NavLink>

                <h4 style="margin-top: 1%;">Resultados Para: <i style="color: var(--brand); font-weight:700; font-size:1.75rem; margin-left: 4px; "> @SearchTerm</i></h4>
            </div>
        }

        @if (UserOffice != null || UserLength != null)
        {
            <div class="container" st yle="max-width:100%">
                @*<NavLink href="users" Match="NavLinkMatch.All">
                        <i class="bi bi-arrow-left" style="font-size:2rem; margin-top:-1rem"></i>
                    </NavLink>*@

                <h4 style="margin-top: 1%;">
                    Filtro Aplicado:
                    <br />
                    @if (UserOffice != null)
                    {<i>Ciudad:</i> <i style="color: var(--brand); font-weight: 500; font-size: 1.5rem; margin-left: 4px; margin-right: 14px; "> @UserOffice</i>}
                    <br />

                    @if (UserLength != null)
                    {<i>Antiguedad:</i>
                        <br />
                        @if (UserLength > 0)
                        {
                            <i style="margin-left: 4px;">Mayor a:</i>
                        }
                        @if (UserLength < 0)
                        {
                            <i style="margin-left: 4px;">Menor a:</i>
                        }
                        @if (UserLength < 0)
                        {
                            <i style="color: var(--brand); font-weight:500; font-size:1.5rem; margin-left: 4px; "> @Math.Abs(UserLength ?? 0) año</i>}
                        else
                        {
                            <i style="color: var(--brand); font-weight:500; font-size:1.5rem; margin-left: 4px; "> @UserLength año</i>}
                    }




                </h4>
            </div>
        }


        <div style="row-gap: 4rem; justify-content: center; display: grid; grid-template-columns: 1fr 1fr 1fr; margin-top:2.5rem">

            @if (Users == null)
            {
                <p>Loading users...</p>
            }
            else
            {

                @if (_searchResults == null)
                {
                    @foreach (var user in Users)
                    {

                        <UserCard User="user"></UserCard>

                    }
                }
                else
                {


                    @foreach (var user in _searchResults)
                    {

                        <UserCard User="user"></UserCard>

                    }
                }
            }
        </div>
    </div>


    @if (showAlert)
    {
        <div class="overlay-alert">
            <div class="alert alert-success flex-reverse" role="alert">
                <button type="button" class="btn-close" @onclick="CloseAlert" aria-label="Close"></button>
                @localMessage
            </div>
        </div>
    }


</UserHomePageLayout>


@code
{
    private List<User>? Users { get; set; }
    private User[]? _searchResults { get; set; }
    private User[]? _cachedSearchResults { get; set; } = Array.Empty<User>();
    public string? localMessage;
    private bool showAlert = false;



    [Parameter, SupplyParameterFromQuery]
    public string?
    UserOffice
    { get; set; }

    [Parameter, SupplyParameterFromQuery]
    public int?
    UserLength
    { get; set; }




    [Parameter]
    public string
    SearchTerm
    { get; set; } = default!;




    protected override async
       Task OnInitializedAsync()
    {


        try
        {
            Users = await UserService.GetAllUsers();

            localMessage = OtherServices.Message;
            if (localMessage != null) await ShowAndHideAlert();

            _cachedSearchResults = Users.ToArray();
            UpdateSearchResults();
            UpdateFilters();



        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hubo un problema al cargar la informacion de los usuarios{ex.Message}");
        }


    }

    private void UpdateSearchResults()
    {

        if (!string.IsNullOrEmpty(SearchTerm)) //aqui solo se comprueba el valor de SearchTerm para actualizar
        {
            var searchTermLower = SearchTerm.ToLower();
            var query = Context.Users
                .Where
                (

                x =>

                x.Name.ToLower().Contains(searchTermLower) ||

                x.Dept.ToLower().Contains(searchTermLower) ||

                x.Tel.ToString().Contains(searchTermLower) ||

                x.Cel.ToLower().Contains(searchTermLower) ||

                x.Position.ToLower().Contains(searchTermLower)


                );

            _searchResults = query.ToArray();

        }
        else
        {
            _searchResults = null;
        }
    }


    private void UpdateFilters()
    {
        if (_searchResults == null)
        {
            _searchResults = _cachedSearchResults;
        }

        var filters = new List<Func<User, bool>>();

        if (!string.IsNullOrEmpty(UserOffice))
        {
            filters.Add(x =>
                x.Office?.Contains(UserOffice, StringComparison.CurrentCultureIgnoreCase) == true);
        }

        if (UserLength.HasValue)
        {
            var currentDate = DateTime.Now;

            if (UserLength.Value >= 0)
            {
                filters.Add(x =>
                    (currentDate - x.EntryDate)?.TotalDays / 365.25 > UserLength.Value);
            }
            else
            {
                filters.Add(x =>
            (currentDate - x.EntryDate)?.TotalDays / 365.25 < Math.Abs(UserLength.Value));
            }
        }

        if (filters.Any())
        {
            _searchResults = _searchResults?.Where(user => filters.All(filter => filter(user))).ToArray();
        }


        StateHasChanged();
    }

    /* */


    protected void CreateNewUser()
    {
        NavigationManager.NavigateTo("/addUser");
    }



    private void CloseAlert()
    {
        showAlert = false;
    }


    private async Task ShowAndHideAlert()
    {
        showAlert = true;
        StateHasChanged();

        await Task.Delay(5000);

        showAlert = false;
        StateHasChanged();
    }


    protected override void OnParametersSet()
    {
        UpdateSearchResults();
        UpdateFilters();

    }


}
