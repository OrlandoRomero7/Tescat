<!-- Card Cuentas de Usuario -->

<FormSection Title="Cuentas de Usuario">
    <EditForm Model="@userCredential">
        @if (options.Any(o => o.Value))
        {
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Agregar Cuenta</label>
                    <InputSelect class="form-select" @bind-Value="selectedOption">
                        <option value="default">Seleccione una opción</option>
                        @foreach (var option in options)
                        {
                            if (option.Value)
                            {
                                <option>@option.Key</option>
                            }
                        }
                    </InputSelect>
                </div>
            </div>
        }
        
        @if (selectedOptions.Contains("portal") || !string.IsNullOrEmpty(userCredential.PortalUser))
        {
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Usuario Portal</label>
                    <InputText class="form-control" @bind-Value="userCredential.PortalUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="userCredential.PortalPass"></InputText>

                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-primary" @onclick="(e)=>DeleteAccount(1)">Quitar</button>
                </div>
            </div>

        }
        @if (selectedOptions.Contains("casa") || !string.IsNullOrEmpty(userCredential.CasaUser))
        {
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Usuario Casa</label>
                    <InputText class="form-control" @bind-Value="userCredential.CasaUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="userCredential.CasaPass"></InputText>
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-primary" @onclick="(e)=>DeleteAccount(2)">Quitar</button>
                </div>
            </div>
        }
        @if (selectedOptions.Contains("mozart") || !string.IsNullOrEmpty(userCredential.MozartUser))
        {
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Usuario Mozart</label>
                    <InputText class="form-control" @bind-Value="userCredential.MozartUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="userCredential.MozartPass"></InputText>
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-primary" @onclick="(e)=>DeleteAccount(3)">Quitar</button>
                </div>
            </div>
        }
        @if (selectedOptions.Contains("darwin") || !string.IsNullOrEmpty(userCredential.DarwinPass))
        {
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Usuario Darwin</label>
                    <InputText class="form-control" @bind-Value="userCredential.DarwinUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="userCredential.DarwinPass"></InputText>
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-primary" @onclick="(e)=>DeleteAccount(4)">Quitar</button>
                </div>
                
                
            </div>
        }
        @if (selectedOptions.Contains("vpn") || !string.IsNullOrEmpty(userCredential.VpnUser))
        {
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label">Usuario VPN</label>
                    <InputText class="form-control" @bind-Value="userCredential.VpnUser"></InputText>
                </div>

                <div class="col-md-4">
                    <label class="form-label">Contraseña</label>
                    <InputText class="form-control" @bind-Value="userCredential.VpnPass"></InputText>
                </div>
                <div class="col-md-4">
                    <button type="button" class="btn btn-primary" @onclick="(e)=>DeleteAccount(5)">Quitar</button>
                </div>
            </div>
            
        }


    </EditForm>
</FormSection>


@code {
    /**/
    [Parameter]
    public UserCredential? userCredential { get; set; } = default!;

    public bool portal, casa, mozart, darwin, vpn;

    private Dictionary<string, bool> options = new Dictionary<string, bool>();

    private List<string> selectedOptions = new List<string>();

    protected override void OnInitialized()
    {
        if (userCredential != null)
        {
            portal = string.IsNullOrEmpty(userCredential.PortalUser);
            casa = string.IsNullOrEmpty(userCredential.CasaUser);
            mozart = string.IsNullOrEmpty(userCredential.MozartUser);
            darwin = string.IsNullOrEmpty(userCredential.DarwinUser);
            vpn = string.IsNullOrEmpty(userCredential.VpnUser);
            //Si es nulo regresara true
            options.Add("portal", portal);
            options.Add("casa", casa);
            options.Add("mozart", mozart);
            options.Add("darwin", darwin);
            options.Add("vpn", vpn);
        }
    }
    private string _selectedOption = "default";

    public string selectedOption
    {
        get => _selectedOption;
        set
        {
            _selectedOption = value;
            HandleSelectionChange();
        }
    }

    private void HandleSelectionChange()
    {
        if (_selectedOption == "default")
        {
            return;
        }
        options.Remove(_selectedOption);
        selectedOptions.Add(_selectedOption);
        _selectedOption = "default"; // Restablecer a la opción por defecto
    }

    private void DeleteAccount(int account)
    {
        switch(account)
        {
            case 1:
                options["portal"] = true; // Hacer que "portal" vuelva a estar disponible en el <select>.
                userCredential.PortalUser = string.Empty; // Limpiar el valor en userCredential.
                userCredential.PortalPass = string.Empty;
                selectedOptions.Remove("portal"); // Eliminar "portal" de las opciones seleccionadas.
                break;
            case 2:
                options["casa"] = true;
                userCredential.CasaUser = string.Empty; 
                userCredential.CasaPass = string.Empty;
                selectedOptions.Remove("casa");
                break;
            case 3:
                options["mozart"] = true;
                userCredential.MozartUser = string.Empty;
                userCredential.MozartPass = string.Empty;
                selectedOptions.Remove("mozart");
                break;
            case 4:
                options["darwin"] = true;
                userCredential.DarwinUser = string.Empty;
                userCredential.DarwinPass = string.Empty;
                selectedOptions.Remove("darwin");
                break;
            case 5:
                options["vpn"] = true;
                userCredential.VpnUser = string.Empty;
                userCredential.VpnPass = string.Empty;
                selectedOptions.Remove("vpn");
                break;

        }
    }

}
