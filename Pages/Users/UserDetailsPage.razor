﻿
@page "/userDetails"
@page "/userDetails/{id:int}"
@using Tescat.Services.UserCredentials;
@using Tescat.Services.Users;
@using Tescat.Services.Emails;
@using Tescat.Pages.Users.UserForms;
@inject IUserService UserService
@inject IUserCredentialService UserCredentialService
@inject IEmailService EmailService
@inject OtherServices OtherServices
@inject NavigationManager NavigationManager
@inject IDbContextFactory<TescatDbContext> ContextFactory
@inject IJSRuntime JSRuntime
@inject IPcService PcService





@if (user != null && user.IdUser == 0)
{
<button type="button" class="btn btn-primary"  @onclick="SubmitChildForm">
    Crear</button>
}
else
{
    <button type="button" class="btn btn-primary"  @onclick="Update">
        Actulizar</button>
        <button type="button" class="btn btn-danger"  @onclick="ShowConfirmationModal">
            Borrar</button>
}

@if (user != null && user.IdUser != 0 && FromUserAddPage)
{
    if (!isEdit) // Añade esta condición
    {
<div class="alert alert-primary">El Usuario Con Numero De Empleado: @user.IdUser <br> Ya Existe.</div>
<div>
    <h3>
        ¿Quiere editar al usuario?
    </h3>
    <button class="btn btn-info" @onclick="(() => isEdit = true)">
        Editar
    </button>
    <button class="btn btn-info" @onclick="ReturnToAddUsersHome">
        Regresar
    </button>
</div>
    }
}

@*Cuando se quiere agregar un usuario que ya esta desde AddUserpage*@
@if (user?.IdUser != 0 && isEdit && FromUserAddPage)
{
 <!-- Card de Informacion Basica -->
<BasicInformation @ref="childReference" user="user" id="id" areas="areas" departaments="departaments" CreateUserCallback="CreateUser"></BasicInformation>

 <!-- Card de Informacion de Contacto -->
<ContacInformation user="user"></ContacInformation>

 <!-- Card de Cuentas de Usuario -->
<UserAccount userCredential="userCredential"></UserAccount>
}

@*Cuando se quiere agregar un nuevo Usuario*@
@if (user?.IdUser == 0)
{
 <!-- Card de Informacion Basica -->
<BasicInformation @ref="childReference" user="user" id="id" areas="areas" departaments="departaments" CreateUserCallback="CreateUser"></BasicInformation>

 <!-- Card de Informacion de Contacto -->
<ContacInformation user="user"></ContacInformation>

 <!-- Card de Cuentas de Usuario -->
<UserAccount userCredential="userCredential"></UserAccount>

}


@*Cuando se queire ver un usuario desde Users(Como que hace conflicto)*@

@if (user?.IdUser != 0 && !isEdit && !FromUserAddPage)

{
 <!-- Card de Informacion Basica -->
<BasicInformation @ref="childReference" user="@user" id="id" areas="areas" departaments="departaments" CreateUserCallback="CreateUser"></BasicInformation>

 <!-- Card de Informacion de Contacto -->
<ContacInformation user="user" userEmails="userEmails"></ContacInformation>

 <!-- Card de Cuentas de Usuario -->
<UserAccount userCredential="userCredential"></UserAccount>

}
<MainModal ModalDisplay="@ModalActive" OnDelete="ConfirmDeletion"></MainModal>

























@code {
    [Parameter]
    public int id { get; set; }

    [Parameter]
    public string? modalDisplay { get; set; }



    public User user = new User();
    private UserCredential? userCredential = new UserCredential();
    private Email userEmails = new Email();


    public string[] areas;
    public string[] departaments { get; set; }

    public int IdOld;



    public bool FromUserAddPage = false;

    private int? OriginalUserId { get; set; }

    public bool isEdit = false;

    public bool ModalActive { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        //idNewUser = OtherServices.NewUser;
        //revisar este if
        try
        {
            if (id != 0)
            {
                user = await UserService.GetUserId(id);
                IdOld = user.IdUser;


                if (OtherServices.LastNavigatedFrom == "AddUserPage")
                {
                    FromUserAddPage = true;
                    OtherServices.LastNavigatedFrom = null;
                }

                areas = await OtherServices.getAreas();
                departaments = await OtherServices.getDepartaments();
                userCredential = await UserCredentialService.GetUserCredentials(id);
                userEmails = await EmailService.GetEmails(id);
                //dataLoaded = true;

                OriginalUserId = user?.IdUser;
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo al cargar datos {e.Message}");
        }

    }


    private async Task CreateUser()
    {
        try
        {
            if (user != null && user.IdUser == 0)
            {
                user.IdUser = id;
                await UserService.InsertUser(user);
                userCredential.IdUser = user.IdUser;
                await UserCredentialService.InsertUserCredentials(userCredential);
                Console.WriteLine("Se creo correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo la creacion del usuario {e.Message}");
        }

    }
    private async Task Update()
    {
        try
        {
            if (user != null && user.IdUser != 0)
            {
                using var context = ContextFactory.CreateDbContext();

                var existingUser = await context.Users
         .AsNoTracking().FirstOrDefaultAsync(usr => usr.IdUser == usr.IdUser);



                if (existingUser != null && user.IMAGE_NAME != null)
                {
                    existingUser.IMAGE_NAME = user.IMAGE_NAME; // Update the image ID or path
                }


                await childReference.SomeMethodInsideComponent();
                await UserService.UpdateUser(IdOld, user, userCredential, userEmails);

                if (IdOld != user.IdUser)
                {
                    NavigationManager.NavigateTo("/userDetails/" + user.IdUser, true);
                    deleteOldId(IdOld);
                }
                StateHasChanged();

                //await UserService.DeleteUser(SaveTemoID.ID);
                Console.WriteLine("Se actualizo correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo actulizar el usuario {e.Message}");
        }


    }
    private async Task Delete()
    {
        try
        {
            if (user != null && user.IdUser != 0)
            {
                int idtemp = user.IdUser;
                //user.Name = tempName;
                await EmailService.QuitEmailFromUserDetails(idtemp);
                await PcService.QuitPcFromUserDetails(idtemp);
                await UserCredentialService.DeleteUserCredentials(idtemp);
                await UserService.DeleteUser(idtemp);
                await OtherServices.ShowMessage("Se elimino el usuario: " + idtemp);
                NavigationManager.NavigateTo("/users");

                Console.WriteLine("Se elimino correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo al eliminar suario {e.Message}");
        }

    }
    private async void deleteOldId(int id)
    {
        await UserService.DeleteUser(id);
    }

    private BasicInformation childReference;

    private void SubmitChildForm()
    {
        childReference.SubmitFromParent();
    }



    private async void ConfirmDeletion()
    {
        await Delete();
    
    }

    protected void ReturnToAddUsersHome()
    {
        NavigationManager.NavigateTo("/addUser");
    }

    private void ShowConfirmationModal()
    {
        ModalActive = true;
        Console.WriteLine(ModalActive);// Mostrar el modal
    }



}
