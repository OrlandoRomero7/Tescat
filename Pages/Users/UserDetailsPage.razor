﻿
@page "/userDetails"
@page "/userDetails/{id:int}"
@using Tescat.Services.UserCredentials;
@using Tescat.Services.Users;
@*@using Tescat.Models;*@
@using Tescat.Pages.Users.UserForms
@inject IUserService UserService
@inject IUserCredentialService UserCredentialService
@inject OtherServices OtherServices
@inject NavigationManager NavigationManager


@if (user != null && user.IdUser==0)
{
    <button type="button" class="btn btn-primary" @onclick="CreateUser">Crear</button>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="Update">Actulizar</button>
    <button type="button" class="btn btn-danger">Borrar</button>
}



<!-- Card de Informacion Basica -->
<BasicInformation user="user" id="id" areas="areas"></BasicInformation>

<!-- Card de Informacion de Contacto -->
<ContacInformation user="user"></ContacInformation>

<!-- Card de Cuentas de Usuario -->
@*<UserAccount userCredential="userCredential"></UserAccount>*@

@code {
    [Parameter]
    public int id { get; set; }

    public User? user = new User();
    private UserCredential? userCredential = new UserCredential();

    //public string? tempName { get; set; }
    public string[]? areas;

    // Solo los hice temporalmente para los @bind-Value
    public string? cel;
    public string? email;
    public string? userPortal;
    public string? departament;


    protected override async Task OnInitializedAsync()
    {
        //revisar este if
        if (id != 0)
        {
            user = await UserService.GetUserId(id);
            //Console.WriteLine("El nombre es: " + user.Name);
            //tempName = user.Name;
            areas = await OtherServices.prueba();
            userCredential = await UserCredentialService.GetUserCredentials(id);
        }
    }

    private async Task CreateUser()
    {
        try
        {
            if (user!=null && user.IdUser == 0)
            {
                user.IdUser = id;
                await UserService.InsertUser(user);
                Console.WriteLine("Se creo correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo la creacion del usuario {e.Message}");
        }

    }
    private async Task Update()
    {
        try
        {
            if (user!=null && user.IdUser != 0)
            {
                //user.Name = tempName;
                await UserService.UpdateUser(user);
                Console.WriteLine("Se actualizo correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo actulizar el usuario {e.Message}");
        }

    }

}
