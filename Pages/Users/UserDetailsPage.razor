﻿
@page "/userDetails"
@page "/userDetails/{id:int}"
@using Tescat.Services.UserCredentials;
@using Tescat.Services.Users;
@*@using Tescat.Models;*@
@using Tescat.Pages.Users.UserForms
@inject IUserService UserService
@inject IUserCredentialService UserCredentialService
@inject OtherServices OtherServices
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime


@if (user != null && user.IdUser == 0)
{
    <button type="button" class="btn btn-primary" @onclick="SubmitChildForm">Crear</button>

}
else
{
    <button type="button" class="btn btn-primary" @onclick="Update">Actulizar</button>
    <button type="button" class="btn btn-danger" @onclick="Delete">Borrar</button>

}


@if (user != null)
{
    <!-- Card de Informacion Basica -->
    <BasicInformation @ref="childReference" user="user" id="id" areas="areas" departaments="departaments" CreateUserCallback="CreateUser"></BasicInformation>

    <!-- Card de Informacion de Contacto -->
    <ContacInformation user="user"></ContacInformation>

    <!-- Card de Cuentas de Usuario -->
    <UserAccount userCredential="userCredential"></UserAccount>


}





@code {
    [Parameter]
    public int id { get; set; }

    public User? user { get; set; }
    private UserCredential? userCredential { get; set; }

    //public string? tempName { get; set; }
    public string[] areas;
    public string[] departaments { get; set; }

    public int IdOld;


    protected override async Task OnInitializedAsync()
    {
        //revisar este if
        if (id != 0)
        {
            user = await UserService.GetUserId(id);
            IdOld = user.IdUser;
            //Console.WriteLine("El nombre es: " + user.Name);
            //tempName = user.Name;
            areas = await OtherServices.getAreas();
            departaments = await OtherServices.getDepartaments();
            userCredential = await UserCredentialService.GetUserCredentials(id);
        }
    }


    private async Task CreateUser()
    {
        try
        {
            if (user != null && user.IdUser == 0)
            {
                user.IdUser = id;
                await UserService.InsertUser(user);
                userCredential.IdUser = user.IdUser;
                await UserCredentialService.InsertUserCredentials(userCredential);
                Console.WriteLine("Se creo correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo la creacion del usuario {e.Message}");
        }

    }
    private async Task Update()
    {
        try
        {
            if (user != null && user.IdUser != 0)
            {

                await UserService.UpdateUser(IdOld, user, userCredential);

                if (IdOld != user.IdUser)
                {
                    NavigationManager.NavigateTo("/userDetails/" + user.IdUser, true);
                    deleteOldId(IdOld);
                }

                //await UserService.DeleteUser(SaveTemoID.ID);
                Console.WriteLine("Se actualizo correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo actulizar el usuario {e.Message}");
        }


    }
    private async Task Delete()
    {
        try
        {
            if (user != null && user.IdUser != 0)
            {
                int idtemp = user.IdUser;
                //user.Name = tempName;
                await UserCredentialService.DeleteUserCredentials(idtemp);
                await UserService.DeleteUser(idtemp);

                Console.WriteLine("Se elimino correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo al eliminar suario {e.Message}");
        }

    }
    private async void deleteOldId(int id)
    {
        await UserService.DeleteUser(id);
    }

    private BasicInformation childReference;

    private void SubmitChildForm()
    {
        childReference.SubmitFromParent();
    }


}
