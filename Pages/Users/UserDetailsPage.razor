﻿
@page "/userDetails"
@page "/userDetails/{id:int}"
@using Tescat.Services.UserCredentials;
@using Tescat.Services.Users;
@using Tescat.Services.Emails;
@using Tescat.Pages.Users.UserForms;
@inject IUserService UserService
@inject IUserCredentialService UserCredentialService
@inject IEmailService EmailService
@inject OtherServices OtherServices
@inject NavigationManager NavigationManager
@inject IDbContextFactory<TescatDbContext> ContextFactory
@inject IJSRuntime JSRuntime
@inject IPcService PcService
@inject NotificationService notificacion





@if (user != null && user.IdUser == 0)
{
    <button type="button" class="btn btn-primary" @onclick="SubmitChildForm">
        Crear
    </button>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="Update">
        Actualizar
    </button>
    <button type="button" class="btn btn-danger"
            @onclick="() => OpeningModal?.ShowConfirmationModal(_modalLocation)">
        Borrar
    </button>
}

@* @if (user != null && user.IdUser != 0 && FromUserAddPage)
{
    if (!isEdit) // Añade esta condición
    {
        <div class="alert alert-primary">El Usuario Con Numero De Empleado: @user.IdUser <br> Ya Existe.</div>
        <div>
            <h3>
                ¿Quiere editar al usuario?
            </h3>
            <button class="btn btn-info" @onclick="(() => isEdit = true)">
                Editar
            </button>
            <button class="btn btn-info" @onclick="ReturnToAddUsersHome">
                Regresar
            </button>
        </div>
    }
} *@

@*Cuando se quiere agregar un usuario que ya esta desde AddUserpage*@
@* @if (user?.IdUser != 0 && isEdit && FromUserAddPage)
{
    <!-- Card de Informacion Basica -->
    <BasicInformation @ref="childReference" user="user" id="id" areas="areas" departaments="departaments" CreateUserCallback="CreateUser"></BasicInformation>

    <!-- Card de Informacion de Contacto -->
    <ContacInformation user="user"></ContacInformation>

    <!-- Card de Cuentas de Usuario -->
    <UserAccount userCredential="userCredential"></UserAccount>
} *@

@*Cuando se quiere agregar un nuevo Usuario*@
@* @if (user?.IdUser == 0)
{
    <!-- Card de Informacion Basica -->
    <BasicInformation @ref="childReference" user="user" id="id" areas="areas" departaments="departaments" CreateUserCallback="CreateUser"></BasicInformation>

    <!-- Card de Informacion de Contacto -->
    <ContacInformation user="user"></ContacInformation>

    <!-- Card de Cuentas de Usuario -->
    <UserAccount userCredential="userCredential"></UserAccount>

} *@


@*Cuando se queire ver un usuario desde Users(Como que hace conflicto)*@

@if (user?.IdUser != 0 && !isEdit && !FromUserAddPage)

{
    <!-- Card de Informacion Basica -->
    if (userContext != null)
    {
        <BasicInformation @ref="childReference" user="@user" userContext="userContext" id="id" areas="areas" departaments="departaments" CreateUserCallback="CreateUser"></BasicInformation>
    }


    <!-- Card de Informacion de Contacto -->
    if (userEmailsContext != null)
    {
        <ContacInformation user="user" userEmails="userEmails" userEmailsContext="userEmailsContext"></ContacInformation>
    }


    <!-- Card de Cuentas de Usuario -->
    if (userCredentialContext!=null)
    {
        <UserAccount userCredential="userCredential" userCredentialContext="userCredentialContext"></UserAccount>
    }
   



}


@code {
    [Parameter]
    public int id { get; set; }



    public User user = new User();
    private UserCredential? userCredential = new UserCredential();
    private Email userEmails = new Email();
    public List<Pc>? dbPc = null;

    public List<String> departaments = new List<string>
    {
        "Operacion","Administracion","Trafico"
    };
    public List<String> areas = new List<string>
    {
        "Impo.Temporal",
        "Contabilidad",
        "Recursos Humanos",
        "Liberaciones/Impo.Temporal",
        "Proveedores",
        "Facturacion/Exportacion",
        "Cobranza",
        "Cuentas de Gastos",
        "Facturacion",
        "Comercializacion",
        "Supervisor Administrativo",
        "Gerente Operativo",
        "Sistemas",
        "Gerente Administrativo",
        "Impo. Definitiva",
        "Impo. Temporal",
        "Exportacion",
        "Liberaciones",
        "Trafico",
        "Captura",
        "Recepcion"

    };

    // public string[]? areas;
    // public string[]? departaments { get; set; }

    public int IdOld;

    public int count;

    public bool FromUserAddPage = false;

    private int? OriginalUserId { get; set; }

    public bool isEdit = false;



    [CascadingParameter]
    public MainModal? OpeningModal { get; set; }



    private string _modalLocation = "DeleteUser";

    EditContext userContext;
    EditContext userEmailsContext;
    EditContext userCredentialContext;

    protected override async Task OnInitializedAsync()
    {
        //idNewUser = OtherServices.NewUser;
        //revisar este if
        try
        {
            if (id != 0)
            {
                user = await UserService.GetUserId(id);
                IdOld = user.IdUser;


                if (OtherServices.LastNavigatedFrom == "AddUserPage")
                {
                    FromUserAddPage = true;
                    OtherServices.LastNavigatedFrom = null;
                }

                //areas = await OtherServices.getAreas();
                //departaments = await OtherServices.getDepartaments();
                userCredential = await UserCredentialService.GetUserCredentials(id);
                userEmails = await EmailService.GetEmails(id);
                dbPc = await PcService.GetNumberPc(id);
                //dataLoaded = true;

                OriginalUserId = user?.IdUser;

                //Editcontext
                userContext = new EditContext(user);
                userCredentialContext = new EditContext(userCredential);
                userEmailsContext = new EditContext(userEmails);
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo al cargar datos {e.Message}");
        }


    }


    private async Task CreateUser()
    {
        try
        {
            if (user != null && user.IdUser == 0)
            {
                user.IdUser = id;
                await UserService.InsertUser(user);
                userCredential.IdUser = user.IdUser;
                await UserCredentialService.InsertUserCredentials(userCredential);
                Console.WriteLine("Se creo correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo la creacion del usuario {e.Message}");
        }

    }
    private async Task Update()
    {
        var IdUser = user.IdUser;
        if (user.IdUser == IdOld)
        {
            bool existingUser = await UserService.ExistingUser(user.IdUser);
            if (existingUser && user.IMAGE_NAME != null)
            {
                user.IMAGE_NAME = user.IMAGE_NAME; // Update the image ID or path
            }
            await childReference.AssingAndUpdateImageName();
            if (userContext != null && userContext.IsModified())
            {
                await UserService.UpdateUser(user);
                userContext.MarkAsUnmodified();
            }
            if (userCredential != null && userCredentialContext != null && userCredentialContext.IsModified())
            {
                await UserCredentialService.UpdateUserCredentials(IdUser,userCredential);
                userCredentialContext.MarkAsUnmodified();
            }
            if (userEmails != null && userEmailsContext != null && userEmailsContext.IsModified())
            {
                
                await EmailService.UpdateUserEmail(IdUser,userEmails);
                userEmailsContext.MarkAsUnmodified();
            }

        }
        else
        {
            bool existingUser = await UserService.ExistingUser(user.IdUser);
            if (existingUser)
            {
                notificacion.Notify(NotificationSeverity.Error, "Error", "Este Id de usuario ya existe.");
            }

        }
        // try
        // {
        //     if (user != null && user.IdUser != 0)
        //     {
        //         using var context = ContextFactory.CreateDbContext();

        //         var existingUser = await context.Users
        //  .AsNoTracking().FirstOrDefaultAsync(usr => usr.IdUser == usr.IdUser);



        //         if (existingUser != null && user.IMAGE_NAME != null)
        //         {
        //             existingUser.IMAGE_NAME = user.IMAGE_NAME; // Update the image ID or path
        //         }


        //         await childReference.SomeMethodInsideComponent();
        //         await UserService.UpdateUser(IdOld, user, userCredential, userEmails);
        //         //await UserCredentialService.UpdateUserCredentials(userCredential);

        //         if (IdOld != user.IdUser)
        //         {
        //             NavigationManager.NavigateTo("/userDetails/" + user.IdUser, true);
        //             deleteOldId(IdOld);
        //         }
        //         StateHasChanged();

        //         //await UserService.DeleteUser(SaveTemoID.ID);
        //         Console.WriteLine("Se actualizo correctamente");
        //     }
        // }
        // catch (ArgumentException e)
        // {
        //     Console.WriteLine($"Fallo actulizar el usuario {e.Message}");
        // }


    }
    private async Task Delete()
    {
        try
        {
            if (user != null && user.IdUser != 0)
            {
                int idtemp = user.IdUser;
                await EmailService.QuitEmailFromUserDetails(idtemp);
                await PcService.QuitPcFromUserDetails(idtemp);
                await UserCredentialService.DeleteUserCredentials(idtemp);
                await UserService.DeleteUser(idtemp);
                await OtherServices.ShowMessage("Se elimino el usuario: " + idtemp);
                StateHasChanged();
                NavigationManager.NavigateTo("/users");

                Console.WriteLine("Se elimino correctamente");
            }
        }
        catch (ArgumentException e)
        {
            Console.WriteLine($"Fallo al eliminar suario {e.Message}");
        }

    }


    private async void deleteOldId(int id)
    {
        await UserService.DeleteUser(id);
    }


    private BasicInformation childReference;


    private void SubmitChildForm()
    {
        childReference.SubmitFromParent();
    }






    protected async override Task OnParametersSetAsync()
    {

        if (OpeningModal?._modalLocation == "UserDeleted")
        {
            OpeningModal._modalLocation = "UserHomePageLayout";
            await Delete();
        }

    }

    protected void ReturnToAddUsersHome()
    {
        NavigationManager.NavigateTo("/addUser");
    }



    private void NavigateToPcDetails(Guid num)
    {
        NavigationManager.NavigateTo("/pcDetails/" + num);
    }



}
