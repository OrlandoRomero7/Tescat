@inject NavigationManager NavigationManager


<div class="controls-container" style="display: flex; justify-content: flex-end;  margin-bottom: 2%;">

    <div class="user-buttons-box">

        <button type="button" class="btn btn-primary" style="margin-right:.5rem;" @onclick="@(e => CombinedClickHandler(e, RippleType.Add))">
            <i class="bi bi-plus" style="padding-top:2px;"></i>
            <span style="left: @(xPos)px; top: @(yPos)px;" class="@(showRippleAdd ? "ripple" : "")"></span>
        </button>

        <div class="dropdown" style="height:100%"
             @onclick="@(e => ClickHandler(e, RippleType.Filter))">

            <button type="button"
                    class="btn btn-primary dropdown-toggle"
                    style="margin-right:.5rem;"
                    data-bs-toggle="dropdown"
                    data-bs-auto-close="outside"
                    aria-expanded="false">

                <i class="bi bi-filter" style="padding-top:2px"></i>

                <span style="left: @(xPos)px; top: @(yPos)px;" class="@(showRippleFilter ? "ripple" : "")"></span>

            </button>


            <div id="filtersButton" class="dropdown-menu shadow filters-dropdown " style="padding: 0.824rem 0.824rem; min-width: 28rem; border-radius: 0.5rem; border: none; ">

                <div style="width:100%">
                    <UserFilter FilterData="@(data => HandleFiltering(data.Item1, data.Item2))"></UserFilter>
                </div>

            </div>

        </div>



        <button type="button" class="btn btn-primary">

            <UserSearch OnDivClicked="HandleDivClickInChildComponent" OnInputFocus="OnSearchInputFocus" OnSearch="HandleUserSearch"></UserSearch>

            <span style="left: @(xPos)px; top: @(yPos)px;" class="@(showRippleSearch ? "ripple" : "")"></span>

        </button>

        <span class="user-buttons-box-indicator @(showIndicator ? "indicator-active" : "")" style="right: @indicatorRight; width:@indicatorWidth;"></span>


    </div>
</div>


@code
{


    [CascadingParameter]
    public MainModal? OpeningModal { get; set; }

    private string modalLocation = "UserHomePageLayout";


    double xPos = 0;
    double yPos = 0;
    bool showRippleAdd = false;
    bool showRippleFilter = false;
    bool showRippleSearch = false;
    bool showIndicator = false;
    string indicatorRight = "123px";
    string indicatorWidth = "50.8px";

    string? searchTermFromUserSearch;
    string? userOfficeFromUserFilter;
    string? userLengthFromUserFilter;





    public enum RippleType

    {
        Add,
        Filter,
        Search
    }

    private Dictionary<RippleType, CancellationTokenSource> ctsDictionary = new Dictionary<RippleType, CancellationTokenSource>
{
    { RippleType.Add, new CancellationTokenSource() },
    { RippleType.Filter, new CancellationTokenSource() },
    { RippleType.Search, new CancellationTokenSource() }
};

    private async Task ClickHandler(MouseEventArgs e, RippleType rippleType)
    {
        // Cancelar cualquier tarea pendiente para este tipo de botón
        if (ctsDictionary.ContainsKey(rippleType))
        {
            ctsDictionary[rippleType].Cancel();
            ctsDictionary[rippleType] = new CancellationTokenSource();
        }

        xPos = e.OffsetX;
        yPos = e.OffsetY;

        await Task.Delay(1);
        showIndicator = true;



        switch (rippleType)
        {
            case RippleType.Add:
                indicatorRight = "123px";
                indicatorWidth = "50.8px";
                showRippleAdd = true;
                break;

            case RippleType.Filter:
                indicatorRight = "64px";
                indicatorWidth = "50.8px";
                showRippleFilter = true;
                break;

            case RippleType.Search:
                indicatorRight = "4px";
                indicatorWidth = "262.8px";
                showRippleSearch = true;
                break;
        }

        StateHasChanged();

        try
        {
            await Task.Delay(500, ctsDictionary[rippleType].Token); // Espera 1 segundo

            showIndicator = true;


            switch (rippleType)
            {
                case RippleType.Add:
                    showRippleAdd = false;
                    break;
                case RippleType.Filter:
                    showRippleFilter = false;
                    break;

                case RippleType.Search:
                    showRippleSearch = false;
                    break;
            }
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {

        }

    }


    private async Task CombinedClickHandler(MouseEventArgs e, RippleType rippleType)
    {
        await ClickHandler(e, rippleType);

        OpeningModal?.ShowConfirmationModal(modalLocation);
        Console.WriteLine(modalLocation);
    }



    private async Task OnSearchInputFocus(FocusEventArgs e)
    {
        await ClickHandler(new MouseEventArgs(), RippleType.Search);
    }



    private void HandleDivClickInChildComponent()
    {
        ResetIndicatorWidth();
    }

    private void HandleUserSearch(string searchTerm)
    {
        searchTermFromUserSearch = searchTerm;

        Console.WriteLine("Search Term from Controls: " + searchTermFromUserSearch);
        NavigationManager.NavigateTo($"/users/{searchTermFromUserSearch}");
    }

    private void HandleFiltering(string? userOffice, int? userLength)
    {

        var queryParameters = new Dictionary<string, object?>()
        {
            [nameof(UserHomePage.UserOffice)] = string.IsNullOrEmpty(userOffice) ? null : userOffice,
        };

        if (userLength.HasValue && userLength != 0 )
        {
            queryParameters.Add(nameof(UserHomePage.UserLength), userLength);
        }

        var uriWithQuerystring = NavigationManager.GetUriWithQueryParameters(queryParameters);

        NavigationManager.NavigateTo(uriWithQuerystring);
    }

    private void ResetIndicatorWidth()
    {

        indicatorRight = "123px";
        indicatorWidth = "50.8px";
        StateHasChanged();

    }

 

}
