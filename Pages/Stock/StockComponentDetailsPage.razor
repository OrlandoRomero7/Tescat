@page "/stock/{nameComponent}/{IdComponent:guid}"
@using Tescat.Pages.Pc
@inject IPcService PcService
@inject IStorageService StorageService
@inject IUserService userService
@inject IMemoryRamService MemoryRamService
@inject ICpuService CpuService
@inject IMotherboardService MotherboardService
@inject IPowerSupplyService PowerSupplyService 
@inject NavigationManager NavigationManager
@inject IUserService userService



@if (nameComponent == "storage" && storage is not null)
{
    <button type="button" class="btn btn-danger" @onclick="@( () => ShowModalComponents("Almacenamiento") )">Eliminar</button>
    <StorageCard storage="storage" stockComponent="stockComponent"></StorageCard>
}
@if (nameComponent == "CPU" && cpu is not null)
{
    <button type="button" class="btn btn-danger" @onclick="@( () => ShowModalComponents("CPU") )">Eliminar</button>
    <CpuCard cpu="cpu" stockComponent="stockComponent"></CpuCard>
}
@if (nameComponent == "RAM" && memoryRam is not null)
{
    <button type="button" class="btn btn-danger" @onclick="@( () => ShowModalComponents("Memoria RAM") )">Eliminar</button>
    <MemoryRamCard memoryRam="memoryRam" stockComponent="stockComponent"></MemoryRamCard>
}
@if (nameComponent == "Motherboard" && motherboard is not null)
{
    <button type="button" class="btn btn-danger" @onclick="@( () => ShowModalComponents("Tarjeta Madre") )">Eliminar</button>
    <MotherboardCard motherboard="motherboard" stockComponent="stockComponent"></MotherboardCard>
}
@if (nameComponent == "PowerSupply" && powerSupply is not null)
{
    <button type="button" class="btn btn-danger" @onclick="@( () => ShowModalComponents("Fuente de Poder") )">Eliminar</button>
    <PowerSupplyCard powerSupply="powerSupply" stockComponent="stockComponent"></PowerSupplyCard>
}
@if (showDropDown)
{
    <FormSection Title="">
        <div class="row mb-3">
            <div class="col-md-3">
                <h5>Asignar a Pc de usuario:</h5>
            </div>
            <RadzenDropDown @bind-Value=IdPc AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            Data=@combine ValueProperty="IdPc" TextProperty="UserName" Style="width: 100%; max-width: 400px;">
                <Template>
                    @($"Nombre: {context.UserName}, Equipo: {context.PcName}")
                </Template>
            </RadzenDropDown>
            <div class="col-md-3">
                @if (IdPc != Guid.Empty)
                {
                    <button type="button" class="btn btn-info" @onclick='() => assingComponent(IdComponent, nameComponent)'>Asignar</button>
                }
            </div>
        </div>
    </FormSection>
}

@if (existsComponent)
{
    <div class="alert alert-primary ">El equipo de este usuario ya contiene este componente</div>
}


<!-- Modal Eliminar Componente-->
<div class="modal" tabindex="-1" role="dialog" style="display: @modalComponentsDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Eliminar @componentName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Cerrar" @onclick="CloseModalComponents">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que quieres eliminar este componente?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModalComponents">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteModalComponents">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string nameComponent { get; set; }

    [Parameter]
    public Guid IdComponent { get; set; }

    public Storage storage { get; set; }

    public Cpu cpu { get; set; }

    public MemoryRam memoryRam { get; set; }

    public Motherboard motherboard { get; set; }

    public PowerSupply powerSupply { get; set; }

    public bool stockComponent = true;

    private string modalComponentsDisplay = "none";

    private string componentName { get; set; } = "";

    private bool showDropDown = false;

    //int idUser;

    IEnumerable<User> users;
    IEnumerable<Pc> pcs;

    Guid IdPc;


    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetAllUsers();
        pcs = await PcService.GetAllPc();
        await LoadData();
        if (nameComponent != null)
        {
            switch (nameComponent)
            {
                case "storage":
                    storage = await StorageService.GetStorage(IdComponent);
                    break;
                case "CPU":
                    cpu = await CpuService.GetCpu(IdComponent);
                    break;
                case "RAM":
                    memoryRam = await MemoryRamService.GetMemoryRam(IdComponent);
                    break;
                case "Motherboard":
                    motherboard = await MotherboardService.GetMotherboard(IdComponent);
                    break;
                case "PowerSupply":
                    powerSupply = await PowerSupplyService.GetPowerSupply(IdComponent);
                    break;
                    
            }
            showDropDown = true;
        }
        


    }
    private void ShowModalComponents(string component)
    {
        switch (component)
        {
            case "Almacenamiento":
                componentName = component;
                break;
            case "Memoria RAM":
                componentName = component;
                break;
            case "CPU":
                componentName = component;
                break;
            case "Tarjeta Madre":
                componentName = component;
                break;
            case "Fuente de Poder":
                componentName = component;
                break;

                // ... otros casos
        }
        modalComponentsDisplay = "block"; // Mostrar el modal
        StateHasChanged(); // Esto podría ser necesario
    }

    private void CloseModalComponents()
    {
        modalComponentsDisplay = "none"; // Ocultar el modal
    }

    private async Task ConfirmDeleteModalComponents()
    {
        switch (componentName)
        {
            case "Almacenamiento":
                await StorageService.DeleteStorage(storage.IdStorage);
                break;
            case "Memoria RAM":
                await MemoryRamService.DeleteMemoryRam(memoryRam.IdRam);
                break;
            case "CPU":
                await CpuService.DeleteCpu(cpu.IdCpu);
                break;
            case "Tarjeta Madre":
                await MotherboardService.DeleteMotherboard(motherboard.IdMotherboard);
                break;
            case "Fuente de Poder":
                await PowerSupplyService.DeletePowerSupply(powerSupply.IdPsu);
                break;
        }
        NavigationManager.NavigateTo("/stock");
        CloseModalComponents(); // Cerrar el modal después de la confirmación
        StateHasChanged();
    }

    public void NavigateToAssingComponent(Guid IdComponent, string nameComponent)
    {
        var url = $"/stock/assing/{Uri.EscapeDataString(nameComponent)}/{IdComponent}";
        NavigationManager.NavigateTo(url);
    }
    private bool existsComponent = false;

    public async Task assingComponent(Guid IdComponent, string component)
    {
        //var IdPc = await PcService.GetPcForAssingComponent(idUser);
        switch (component)
        {
            case "storage":
                storage.IdPc = IdPc;
                storage = await StorageService.UpdateStorage(storage, IdComponent);
                break;
            case "CPU":
                var checkPC = await CpuService.GetCpuWithPcId(IdPc);
                if(checkPC.IdPc == null)
                {
                    cpu.IdPc = IdPc;
                    cpu = await CpuService.UpdateCpuForStock(cpu);
                    NavigateToPC(IdPc);
                }
                else
                {
                    existsComponent = true;
                }
                break;
            case "RAM":
                memoryRam = await MemoryRamService.GetMemoryRam(IdComponent);
                break;
            case "Motherboard":
                motherboard = await MotherboardService.GetMotherboard(IdComponent);
                break;
            case "PowerSupply":
                powerSupply = await PowerSupplyService.GetPowerSupply(IdComponent);
                break;
        }

    }
    public void NavigateToPC(Guid IdPc)
    {
        NavigationManager.NavigateTo("/pcDetails/" + IdPc);
    }

    List<PcsAndUsers> combine = new List<PcsAndUsers>();

    private async Task LoadData()
    {
        combine = new List<PcsAndUsers>();

        foreach (var pc in pcs)
        {
            var user = users.FirstOrDefault(u => u.IdUser == pc.IdUser);

            if (user != null)
            {
                combine.Add(new PcsAndUsers
                    {
                        IdPc = pc.IdPc,
                        PcName = pc.PcName,
                        UserName = user.Name
                    });
            }
        }
    }


    

}
